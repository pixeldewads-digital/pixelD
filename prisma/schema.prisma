generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Category {
  SOCIAL_MEDIA
  MINI_EDU
  BALI_ITINERARY
}

enum License {
  PERSONAL
  COMMERCIAL
}

enum ProductStatus {
  DRAFT
  REVIEW
  PUBLISHED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentProvider {
  MIDTRANS
  XENDIT
  STRIPE
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  image     String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            String        @id @default(cuid())
  slug          String        @unique
  title         String
  description   String
  category      Category
  priceCents    Int
  currency      String        @default("IDR")
  license       License       @default(COMMERCIAL)
  formats       String[]
  coverImageUrl String
  galleryUrls   String[]
  fileKey       String
  version       String        @default("1.0.0")
  status        ProductStatus @default(DRAFT)
  reviews       Review[]
  items         OrderItem[]
  wishlists     Wishlist[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Order {
  id             String          @id @default(cuid())
  userId         String
  totalCents     Int
  currency       String          @default("IDR")
  paymentStatus  PaymentStatus   @default(PENDING)
  provider       PaymentProvider
  providerRef    String?
  couponCode     String?
  idempotencyKey String?         @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  items          OrderItem[]
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  productId  String
  priceCents Int
  quantity   Int     @default(1)
  order      Order   @relation(fields: [orderId], references: [id])
  product    Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String
  visible   Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Coupon {
  code        String    @id
  description String?
  percentOff  Int?
  amountOff   Int?
  active      Boolean   @default(true)
  startsAt    DateTime?
  endsAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model DownloadLog {
  id          String   @id @default(cuid())
  orderItemId String
  userId      String
  createdAt   DateTime @default(now())
  ip          String?
  userAgent   String?
  success     Boolean  @default(true)

  @@index([orderItemId])
  @@index([userId])
}